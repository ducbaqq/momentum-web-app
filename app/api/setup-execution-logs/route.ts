import { NextResponse } from 'next/server';
import pg from 'pg';
const { Pool } = pg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
  max: 6,
});

export async function POST() {
  try {
    // Create the execution logs table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS bt_execution_logs (
          run_id TEXT NOT NULL,
          symbol TEXT NOT NULL,
          bar_index INTEGER NOT NULL,
          ts TIMESTAMPTZ NOT NULL,
          
          -- Raw market data the backtester saw
          candle_data TEXT NOT NULL,           -- The exact candle data (OHLCV + features) as JSON
          
          -- Strategy state and decisions
          strategy_signals TEXT NOT NULL,      -- All signals generated by strategy as JSON
          filtered_signals TEXT NOT NULL,      -- Signals after validation/filtering as JSON
          pending_signals TEXT NOT NULL,       -- Signals queued for next bar as JSON
          executed_signals TEXT NOT NULL,      -- Signals actually executed this bar as JSON
          
          -- Position and account state
          positions_before TEXT NOT NULL,      -- Position state before processing as JSON
          positions_after TEXT NOT NULL,       -- Position state after processing as JSON
          account_balance DECIMAL(15,6) NOT NULL,
          total_equity DECIMAL(15,6) NOT NULL,
          unrealized_pnl DECIMAL(15,6) NOT NULL,
          
          -- Execution details
          execution_price DECIMAL(15,6),        -- Actual execution price (with slippage)
          slippage_amount DECIMAL(15,6),        -- Slippage applied
          commission_paid DECIMAL(15,6),        -- Commission for this bar
          funding_paid DECIMAL(15,6),           -- Funding paid/received
          
          -- Decision reasoning
          strategy_state TEXT NOT NULL,        -- Internal strategy state/indicators as JSON
          rejection_reasons TEXT,              -- Why signals were rejected as JSON
          execution_notes TEXT,                 -- Any execution notes/warnings
          
          -- Timestamps
          created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
          
          PRIMARY KEY (run_id, symbol, bar_index)
      )
    `);

    // Create indexes
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_bt_execution_logs_run_symbol 
      ON bt_execution_logs(run_id, symbol, bar_index)
    `);
    
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_bt_execution_logs_ts 
      ON bt_execution_logs(run_id, ts)
    `);

    return NextResponse.json({ 
      success: true, 
      message: 'Execution logs table created successfully' 
    });

  } catch (error: any) {
    console.error('Failed to create execution logs table:', error);
    return NextResponse.json(
      { error: 'Failed to create table', details: error.message },
      { status: 500 }
    );
  }
}