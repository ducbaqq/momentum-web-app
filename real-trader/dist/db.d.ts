import { Pool } from 'pg';
import type { RealTradeRun, RealTrade, RealPosition, RealSignal, Candle } from './types.js';
export declare const pool: Pool;
export declare function testConnection(): Promise<void>;
export declare function getActiveRuns(): Promise<RealTradeRun[]>;
export declare function getLivePrices(symbols: string[]): Promise<Record<string, number>>;
export declare function getCompleted15mCandles(symbols: string[]): Promise<Record<string, Candle>>;
export declare function hasNew15mCandles(symbols: string[], lastCheckTime?: string): Promise<boolean>;
export declare function updateLastProcessedCandle(runId: string, timestamp: string): Promise<void>;
export declare function getLastProcessedCandle(runId: string): Promise<string | null>;
export declare function getCurrentPositions(runId: string): Promise<RealPosition[]>;
export declare function createTrade(trade: Omit<RealTrade, 'trade_id' | 'created_at'>): Promise<string>;
export declare function createPosition(position: Omit<RealPosition, 'position_id' | 'opened_at' | 'last_update'>): Promise<string>;
export declare function updatePosition(positionId: string, currentPrice: number, unrealizedPnl: number, marketValue: number): Promise<void>;
export declare function closePosition(positionId: string, exitPrice: number, realizedPnl: number): Promise<void>;
export declare function logSignal(signal: Omit<RealSignal, 'signal_id' | 'created_at'>): Promise<void>;
export declare function updateRunStatus(runId: string, status: string, error?: string): Promise<void>;
export declare function updateRunCapital(runId: string, currentCapital: number): Promise<void>;
export declare function getTodaysPnL(runId: string): Promise<number>;
export declare function getMaxDrawdown(runId: string): Promise<number>;
export declare function updateDailySummary(runId: string, tradingDate: string, summary: {
    tradesCount: number;
    realizedPnl: number;
    unrealizedPnl: number;
    fees: number;
    dailyReturnPct: number;
    maxDrawdownPct: number;
    capitalStart: number;
    capitalEnd: number;
    maxConcurrentPositions: number;
    totalExposure: number;
}): Promise<void>;
