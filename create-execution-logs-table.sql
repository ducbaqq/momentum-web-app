-- Table to store detailed backtest execution logs
-- This captures EXACTLY what the backtester decided at each step

CREATE TABLE IF NOT EXISTS bt_execution_logs (
    run_id TEXT NOT NULL,
    symbol TEXT NOT NULL,
    bar_index INTEGER NOT NULL,
    ts TIMESTAMPTZ NOT NULL,
    
    -- Raw market data the backtester saw
    candle_data JSONB NOT NULL,           -- The exact candle data (OHLCV + features)
    
    -- Strategy state and decisions
    strategy_signals JSONB NOT NULL,      -- All signals generated by strategy
    filtered_signals JSONB NOT NULL,      -- Signals after validation/filtering
    pending_signals JSONB NOT NULL,       -- Signals queued for next bar
    executed_signals JSONB NOT NULL,      -- Signals actually executed this bar
    
    -- Position and account state
    positions_before JSONB NOT NULL,      -- Position state before processing
    positions_after JSONB NOT NULL,       -- Position state after processing
    account_balance DECIMAL(15,6) NOT NULL,
    total_equity DECIMAL(15,6) NOT NULL,
    unrealized_pnl DECIMAL(15,6) NOT NULL,
    
    -- Execution details
    execution_price DECIMAL(15,6),        -- Actual execution price (with slippage)
    slippage_amount DECIMAL(15,6),        -- Slippage applied
    commission_paid DECIMAL(15,6),        -- Commission for this bar
    funding_paid DECIMAL(15,6),           -- Funding paid/received
    
    -- Decision reasoning
    strategy_state JSONB NOT NULL,        -- Internal strategy state/indicators
    rejection_reasons JSONB,              -- Why signals were rejected
    execution_notes TEXT,                 -- Any execution notes/warnings
    
    -- Timestamps
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    PRIMARY KEY (run_id, symbol, bar_index)
);

-- Index for efficient querying
CREATE INDEX IF NOT EXISTS idx_bt_execution_logs_run_symbol ON bt_execution_logs(run_id, symbol, bar_index);
CREATE INDEX IF NOT EXISTS idx_bt_execution_logs_ts ON bt_execution_logs(run_id, ts);